
My internal network:

aalruwai@eva:~$ sipcalc -a 172.31.0.0/20
-[ipv4 : 172.31.0.0/20] - 0

[Classfull]
Host address		- 172.31.0.0
Host address (decimal)	- 2887712768
Host address (hex)	- AC1F0000
Network address		- 172.31.0.0
Network class		- B
Network mask		- 255.255.0.0
Network mask (hex)	- FFFF0000
Broadcast address	- 172.31.255.255
[CIDR]
Host address		- 172.31.0.0
Host address (decimal)	- 2887712768
Host address (hex)	- AC1F0000
Network address		- 172.31.0.0
Network mask		- 255.255.240.0
Network mask (bits)	- 20
Network mask (hex)	- FFFFF000
Broadcast address	- 172.31.15.255
Cisco wildcard		- 0.0.15.255
Addresses in network	- 4096
Network range		- 172.31.0.0 - 172.31.15.255
Usable range		- 172.31.0.1 - 172.31.15.254
Networks]
Network			- 172.31.0.0      - 172.31.15.255 (current)
----------

The rule of the firewall on AWS
I ran authorize-security-group-ingress to create firewall rules, The output is allowed 
to travel anywhere. I am allowing only the services of DNS and HTTP that run in my server 

aws ec2 authorize-security-group-ingress --group-id sg-52a4432a 
and enable: 
protocol tcp  on port 80, 53
protocol udp on port 53
For ICMP I used -1 indicates all ICMP codes for all ICMP types and codes for the ICMP type.
Using --cidr 172.31.0.0/20 to add the CIDR IP range.

aalruwai@avalon:~/part2$ aws ec2 describe-security-groups --group-name anwarGroup
SECURITYGROUPS	security group for development environment in EC	sg-52a4432a	anwarGroup	718080603727	vpc-f4aefa90
IPPERMISSIONS	80	tcp	80
IPRANGES	172.31.0.0/20
IPPERMISSIONS	22	tcp	22
IPRANGES	0.0.0.0/0
IPPERMISSIONS	53	udp	53
IPRANGES	172.31.0.0/20
IPPERMISSIONS	53	tcp	53
IPRANGES	172.31.0.0/20
IPPERMISSIONS	-1	icmp	-1
IPRANGES	172.31.0.0/20
IPPERMISSIONSEGRESS	-1
IPRANGES	0.0.0.0/0




The server is a fedora system:
IP address: 
[root@ip-172-31-7-184 part2]# ifconfig 
eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 172.31.7.184  netmask 255.255.240.0  broadcast 172.31.15.255
        inet6 fe80::849:eff:fe52:b8db  prefixlen 64  scopeid 0x20<link>
        ether 0a:49:0e:52:b8:db  txqueuelen 1000  (Ethernet)
        RX packets 425904  bytes 472985990 (451.0 MiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 202644  bytes 25040367 (23.8 MiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10<host>
        loop  txqueuelen 0  (Local Loopback)
        RX packets 1433  bytes 217603 (212.5 KiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 1433  bytes 217603 (212.5 KiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

[root@ip-172-31-7-184 part2]# 



Step DNS:

resolv.conf file, it allows to access to the Internet DNS
the resolver routines reads it the first time.
I used the localhost and the internal IP address of the fedora server on nameserver  
[fedora@ip-172-31-7-184 ~]$ cat /etc/resolv.conf 
; generated by /usr/sbin/dhclient-script
;search ec2.internal
nameserver 172.31.7.184
nameserver 127.0.0.1
[fedora@ip-172-31-7-184 ~]$ 

named.conf
I blocked the v6 prot because I am not using it in my network. DNS uses UDP port 53 and also
uses TCP port 53 if UDP port 53 is not accepted. 
To listen on port 53 from interface that has localhost address and IP 172.31.7.184
allow-query: allows to issue queries to the server only in my internal network.
 
It is for a secure DNS service but since I did not create my own key 

[root@ip-172-31-7-184 fedora]# cat /etc/named.conf 
//
// named.conf
//
// Provided by Red Hat bind package to configure the ISC BIND named(8) DNS
// server as a caching only nameserver (as a localhost DNS resolver only).
//
// See /usr/share/doc/bind*/sample/ for example named configuration files.
//

options {
	listen-on port 53 { 127.0.0.1; 172.31.7.184; };
	#listen-on-v6 port 53 { ::1; };
	directory 	"/var/named";
	dump-file 	"/var/named/data/cache_dump.db";
	statistics-file "/var/named/data/named_stats.txt";
	memstatistics-file "/var/named/data/named_mem_stats.txt";
	allow-query     { localhost; 127.0.0.1; 172.31.0.0/20; };

	/* 
	 - If you are building an AUTHORITATIVE DNS server, do NOT enable recursion.
	 - If you are building a RECURSIVE (caching) DNS server, you need to enable 
	   recursion. 
	 - If your recursive DNS server has a public IP address, you MUST enable access 
	   control to limit queries to your legitimate users. Failing to do so will
	   cause your server to become part of large scale DNS amplification 
	   attacks. Implementing BCP38 within your network would greatly
	   reduce such attack surface 
	*/

	recursion yes;
	dnssec-enable yes;
	dnssec-validation yes;
	#forwarders {;};
	/* Path to ISC DLV key */
	/* In case you want to use ISC DLV, please uncomment the following line. */
	//bindkeys-file "/etc/named.iscdlv.key";

#	managed-keys-directory "/var/named/dynamic";

#	pid-file "/run/named/named.pid";
	#session-keyfile "/run/named/session.key";

	/* https://fedoraproject.org/wiki/Changes/CryptoPolicy */
	#include "/etc/crypto-policies/back-ends/bind.config";
};

logging {
        channel default_debug {
                file "data/named.run";
                severity dynamic;
        };
};

zone "." IN {
	type hint;
	file "named.ca";
};


include "/etc/named.rfc1912.zones";
#include "/etc/named.root.key";
[root@ip-172-31-7-184 fedora]# 

Allowed only IPv4 on DNS and disabled IPv6 lookups with DNS

[root@ip-172-31-7-184 fedora]# cat /etc/sysconfig/named
# BIND named process options
# ~~~~~~~~~~~~~~~~~~~~~~~~~~
#
OPTIONS="-4"
# OPTIONS="whatever"     --  These additional options will be passed to named
#                            at startup. Don't add -t here, enable proper
#                            -chroot.service unit file.
#
# DISABLE_ZONE_CHECKING  --  By default, service file calls named-checkzone
#                            utility for every zone to ensure all zones are
#                            valid before named starts. If you set this option
#                            to 'yes' then service file doesn't perform those
#                            checks.
[root@ip-172-31-7-184 fedora]# 


[root@ip-172-31-7-184 fedora]# service named restart
Redirecting to /bin/systemctl restart  named.service

[root@ip-172-31-7-184 fedora]# service named status
Redirecting to /bin/systemctl status  named.service
● named.service - Berkeley Internet Name Domain (DNS)
   Loaded: loaded (/usr/lib/systemd/system/named.service; enabled; vendor preset: disabled)
   Active: active (running) since Sun 2016-04-03 22:01:12 UTC; 2s ago
  Process: 25113 ExecStop=/bin/sh -c /usr/sbin/rndc stop > /dev/null 2>&1 || /bin/kill -TERM $MAINPID (code=exited, status=0/SUCCESS)
  Process: 25129 ExecStart=/usr/sbin/named -u named $OPTIONS (code=exited, status=0/SUCCESS)
  Process: 25125 ExecStartPre=/bin/bash -c if [ ! "$DISABLE_ZONE_CHECKING" == "yes" ]; then /usr/sbin/named-checkconf -z /etc/named.conf; else echo "Checking of zone files is disabled"; fi (code=exited, status=0/SUCCESS)
 Main PID: 25130 (named)
   CGroup: /system.slice/named.service
           └─25130 /usr/sbin/named -u named -4

Apr 03 22:01:12 ip-172-31-7-184.ec2.internal named[25130]: command channel listening on 127.0.0.1#953
Apr 03 22:01:12 ip-172-31-7-184.ec2.internal named[25130]: managed-keys-zone: loaded serial 0
Apr 03 22:01:12 ip-172-31-7-184.ec2.internal named[25130]: zone 0.in-addr.arpa/IN: loaded serial 0
Apr 03 22:01:12 ip-172-31-7-184.ec2.internal named[25130]: zone 1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.ip6.arpa/IN: lo...erial 0
Apr 03 22:01:12 ip-172-31-7-184.ec2.internal named[25130]: zone 1.0.0.127.in-addr.arpa/IN: loaded serial 0
Apr 03 22:01:12 ip-172-31-7-184.ec2.internal named[25130]: zone localhost/IN: loaded serial 0
Apr 03 22:01:12 ip-172-31-7-184.ec2.internal named[25130]: zone localhost.localdomain/IN: loaded serial 0
Apr 03 22:01:12 ip-172-31-7-184.ec2.internal named[25130]: all zones loaded
Apr 03 22:01:12 ip-172-31-7-184.ec2.internal systemd[1]: Started Berkeley Internet Name Domain (DNS).
Apr 03 22:01:12 ip-172-31-7-184.ec2.internal named[25130]: running
Hint: Some lines were ellipsized, use -l to show in full.
[root@ip-172-31-7-184 fedora]# 




Step iptables rules on server:

First on the server, 
I allow only the internal network: 172.31.0.0/20 

When the packet accepts the rule on the target 
The port 53 (DNS) is specified on protocols TCP and UDP for INPUT.
TCP port 53 is used when the DNS responses higher than size of bytes on UDP around (512 bytes)
Alos TCP port 53 is used when there are zones that transfer between two DNS servers. 
 
The port 80 (HTTP) is specified on protocols TCP for INPUT.
The source is the host address range 172.31.0.1 - 172.31.15.254. 
The destination anywhere 

When the packets are arriving at the server from the clients, it is allowed from 
only services of DNS and HTTP. When the packets are originating from the server,
it is allowed to travel anywhere. 

"-I" option is to insert and to force these rules to be first.
"-s" flag to specify the source address and if I added "-d" I would add the 
IP address of a server to specify it as a destination. 
"-p" to specify the protocol of the rule. Protocols UDP and TCP are allowed. 
--dport to specify the destination port for the protocol of the rule.
"-j" specifies the target of the rule when the packet matches it.
Accept: to accept and process the packet rules.
The OUTPUT and FORWARD chain’s default policy are accept.

iptables -I INPUT -s 172.31.0.0/20 -p udp --dport 53 -j ACCEPT
iptables -I INPUT -s 172.31.0.0/20 -p tcp --dport 53 -j ACCEPT
iptables -I INPUT -s 172.31.0.0/20 -p tcp --dport 80 -j ACCEPT

to print the rules like iptables-save
[root@ip-172-31-7-184 part2]# iptables -S
-P INPUT ACCEPT
-P FORWARD ACCEPT
-P OUTPUT ACCEPT
-A INPUT -s 172.31.0.0/20 -p tcp -m tcp --dport 80 -j ACCEPT
-A INPUT -s 172.31.0.0/20 -p tcp -m tcp --dport 53 -j ACCEPT
-A INPUT -s 172.31.0.0/20 -p udp -m udp --dport 53 -j ACCEPT

To list all rules in all chains. 
[root@ip-172-31-7-184 part2]# iptables -L
Chain INPUT (policy ACCEPT)
target     prot opt source               destination         
ACCEPT     tcp  --  172.31.0.0/20        anywhere             tcp dpt:http
ACCEPT     tcp  --  172.31.0.0/20        anywhere             tcp dpt:domain
ACCEPT     udp  --  172.31.0.0/20        anywhere             udp dpt:domain

Chain FORWARD (policy ACCEPT)
target     prot opt source               destination         

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination         
[root@ip-172-31-7-184 part2]# 



The client is a Linux-Amazon system:

[root@ip-172-31-4-22 part2client]# ifconfig 
eth0      Link encap:Ethernet  HWaddr 0A:11:A7:37:45:21  
          inet addr:172.31.4.22  Bcast:172.31.15.255  Mask:255.255.240.0
          inet6 addr: fe80::811:a7ff:fe37:4521/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:86276 errors:0 dropped:0 overruns:0 frame:0
          TX packets:66826 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:36931630 (35.2 MiB)  TX bytes:9605139 (9.1 MiB)

lo        Link encap:Local Loopback  
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:2 errors:0 dropped:0 overruns:0 frame:0
          TX packets:2 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1 
          RX bytes:140 (140.0 b)  TX bytes:140 (140.0 b)

[root@ip-172-31-4-22 part2client]# 


the /etc/resolv.conf file has the IP address of my DNS server.
The nameserver is the server's IP address:

[root@ip-172-31-4-22 ec2-user]# cat /etc/resolv.conf 
; generated by /sbin/dhclient-script
;search ec2.internal
;options timeout:2 attempts:5
nameserver 172.31.7.184 


nslookup shows first two lines that are the dns server IP address 
[ec2-user@ip-172-31-4-22 ~]$ nslookup yahoo.com
Server:		172.31.7.184
Address:	172.31.7.184#53

Non-authoritative answer:
Name:	yahoo.com
Address: 98.139.183.24
Name:	yahoo.com
Address: 206.190.36.45
Name:	yahoo.com
Address: 98.138.253.109

[ec2-user@ip-172-31-4-22 ~]$ 

utility to query DNS:
dig and trace DNS, the internal network and external network
When trace the external network I can see the DNS server's IP

[root@ip-172-31-4-22 part2client]#  dig +trace 172.31.7.184 

; <<>> DiG 9.8.2rc1-RedHat-9.8.2-0.37.rc1.45.amzn1 <<>> +trace 172.31.7.184
;; global options: +cmd
.			483030	IN	NS	l.root-servers.net.
.			483030	IN	NS	m.root-servers.net.
.			483030	IN	NS	j.root-servers.net.
.			483030	IN	NS	c.root-servers.net.
.			483030	IN	NS	a.root-servers.net.
.			483030	IN	NS	e.root-servers.net.
.			483030	IN	NS	b.root-servers.net.
.			483030	IN	NS	d.root-servers.net.
.			483030	IN	NS	g.root-servers.net.
.			483030	IN	NS	h.root-servers.net.
.			483030	IN	NS	f.root-servers.net.
.			483030	IN	NS	k.root-servers.net.
.			483030	IN	NS	i.root-servers.net.
;; Received 396 bytes from 172.31.7.184#53(172.31.7.184) in 451 ms

.			86400	IN	SOA	a.root-servers.net. nstld.verisign-grs.com. 2016040400 1800 900 604800 86400
;; Received 105 bytes from 199.7.91.13#53(199.7.91.13) in 1 ms

[root@ip-172-31-4-22 part2client]#  dig +trace 52.90.156.131

; <<>> DiG 9.8.2rc1-RedHat-9.8.2-0.37.rc1.45.amzn1 <<>> +trace 52.90.156.131
;; global options: +cmd
.			482941	IN	NS	k.root-servers.net.
.			482941	IN	NS	a.root-servers.net.
.			482941	IN	NS	g.root-servers.net.
.			482941	IN	NS	h.root-servers.net.
.			482941	IN	NS	j.root-servers.net.
.			482941	IN	NS	e.root-servers.net.
.			482941	IN	NS	l.root-servers.net.
.			482941	IN	NS	b.root-servers.net.
.			482941	IN	NS	d.root-servers.net.
.			482941	IN	NS	m.root-servers.net.
.			482941	IN	NS	i.root-servers.net.
.			482941	IN	NS	f.root-servers.net.
.			482941	IN	NS	c.root-servers.net.
;; Received 496 bytes from 172.31.7.184#53(172.31.7.184) in 28 ms

.			86400	IN	SOA	a.root-servers.net. nstld.verisign-grs.com. 2016040400 1800 900 604800 86400
;; Received 106 bytes from 192.112.36.4#53(192.112.36.4) in 35 ms

[root@ip-172-31-4-22 part2client]# 

using host to show any record of the IP address 
[ec2-user@ip-172-31-4-22 ~]$ host -a 172.31.7.184 | grep Received
Received 97 bytes from 172.31.7.184#53 in 1 ms

[ec2-user@ip-172-31-4-22 ~]$ dig 172.31.7.184 | grep SERVER
;; SERVER: 172.31.7.184#53(172.31.7.184)
[ec2-user@ip-172-31-4-22 ~]$ 


